CREATE OR REPLACE PACKAGE PKG_RECRUITER_MANAGEMENT AS
    PROCEDURE CREATE_RECRUITER_PROFILE(
        PI_FNAME IN USERS.FIRSTNAME%TYPE DEFAULT NULL,
        PI_LNAME IN USERS.LASTNAME%TYPE DEFAULT NULL,
        PI_EMAIL IN USERS.EMAIL%TYPE,
        PI_UNAME IN USERS.USERNAME%TYPE,
        PI_PW IN USERS.PASSWORD%TYPE,
        PI_COMPANY_ID IN COMPANIES.COMPANY_ID%TYPE
    );
    
    PROCEDURE UPDATE_RECRUITER_PROFILE(
        PI_FNAME IN USERS.FIRSTNAME%TYPE DEFAULT 'DEFAULT_FLAG',
        PI_LNAME IN USERS.LASTNAME%TYPE DEFAULT 'DEFAULT_FLAG',
        PI_UNAME IN USERS.USERNAME%TYPE,
        PI_PW IN USERS.PASSWORD%TYPE DEFAULT 'DEFAULT_FLAG'
    );
END PKG_RECRUITER_MANAGEMENT;
/

CREATE OR REPLACE PACKAGE BODY PKG_RECRUITER_MANAGEMENT AS
    -- PROCEDURE TO CREATE RECRUITER USER
    PROCEDURE CREATE_RECRUITER_PROFILE(
        PI_FNAME IN USERS.FIRSTNAME%TYPE DEFAULT NULL,
        PI_LNAME IN USERS.LASTNAME%TYPE DEFAULT NULL,
        PI_EMAIL IN USERS.EMAIL%TYPE,
        PI_UNAME IN USERS.USERNAME%TYPE,
        PI_PW IN USERS.PASSWORD%TYPE,
        PI_COMPANY_ID IN COMPANIES.COMPANY_ID%TYPE
    ) AS
        V_COMPANY_ID NUMBER;
        V_USER_ID NUMBER := -1;
        NULL_COMPANY_ID_EXEC EXCEPTION;
        
    BEGIN
        IF PI_COMPANY_ID IS NULL THEN
            RAISE NULL_COMPANY_ID_EXEC;
        END IF;

        BEGIN
            SELECT COMPANY_ID INTO V_COMPANY_ID
            FROM COMPANIES
            WHERE LOWER(COMPANY_ID) = LOWER(PI_COMPANY_ID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN 
                RAISE NULL_COMPANY_ID_EXEC; 
        END;
        
        V_USER_ID := USER_MGMT.CREATE_USER(PI_FNAME, PI_LNAME, PI_EMAIL, PI_UNAME, PI_PW);
        
        IF V_USER_ID != -1 THEN
            -- INSERT INTO RECRUITER TABLE
            INSERT INTO RECRUITERS (USER_ID, COMPANY_ID)
            VALUES (V_USER_ID, V_COMPANY_ID);
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('USER CREATED SUCCESSFULLY. USER_ID: ' || V_USER_ID));
            COMMIT;
        ELSE
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Due to an error Transactions are rolled back'));
            ROLLBACK;
        END IF;
        
    EXCEPTION
        WHEN NULL_COMPANY_ID_EXEC THEN
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error creating PROFILE: COMPANY_ID cannot be empty or does not exist.'));
        WHEN OTHERS THEN
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('ERROR: ' || SQLERRM));
        ROLLBACK;
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Due to an error Transactions if any are rolled back'));         
    END CREATE_RECRUITER_PROFILE;

    -- PROCEDURE TO UPDATE RECRUITER USER
    PROCEDURE UPDATE_RECRUITER_PROFILE(
        PI_FNAME IN USERS.FIRSTNAME%TYPE DEFAULT 'DEFAULT_FLAG',
        PI_LNAME IN USERS.LASTNAME%TYPE DEFAULT 'DEFAULT_FLAG',
        PI_UNAME IN USERS.USERNAME%TYPE,
        PI_PW IN USERS.PASSWORD%TYPE DEFAULT 'DEFAULT_FLAG'
    ) AS
        V_USER_EXISTS NUMBER DEFAULT 0;
        V_USER_DATA USERS%ROWTYPE;
        
        NULL_USERNAME_EXEC EXCEPTION;
        NULL_FNAME_EXEC EXCEPTION;
        NULL_LNAME_EXEC EXCEPTION;
        NULL_PASSWORD_EXEC EXCEPTION;
        
    BEGIN
        IF PI_UNAME IS NULL OR LENGTH(TRIM(PI_UNAME)) IS NULL THEN
            RAISE NULL_USERNAME_EXEC;
        END IF;

        BEGIN
            SELECT * INTO V_USER_DATA
            FROM USERS
            WHERE LOWER(USERNAME) = LOWER(PI_UNAME);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error updating USERNAME: "' || PI_UNAME || '" DOES NOT EXIST.'));
                RETURN;
        END;
        
        IF PI_FNAME IS NULL OR LENGTH(TRIM(PI_FNAME)) IS NULL THEN
            RAISE NULL_FNAME_EXEC;
            RETURN;
        END IF;
        
        IF PI_LNAME IS NULL OR LENGTH(TRIM(PI_LNAME)) IS NULL THEN
            RAISE NULL_LNAME_EXEC;
            RETURN;
        END IF;
        
        IF PI_PW IS NULL OR LENGTH(TRIM(PI_PW)) IS NULL THEN
            RAISE NULL_PASSWORD_EXEC;
            RETURN;
        END IF;

        UPDATE USERS
        SET
            FIRSTNAME = CASE WHEN PI_FNAME != 'DEFAULT_FLAG' AND PI_FNAME IS NOT NULL THEN PI_FNAME ELSE FIRSTNAME END,
            LASTNAME = CASE WHEN PI_LNAME != 'DEFAULT_FLAG' AND PI_LNAME IS NOT NULL THEN PI_LNAME ELSE LASTNAME END,
            PASSWORD = CASE WHEN PI_PW != 'DEFAULT_FLAG' AND PI_PW IS NOT NULL THEN PI_PW ELSE PASSWORD END
        WHERE LOWER(USERNAME) = LOWER(PI_UNAME);

        -- Output the result
        IF SQL%ROWCOUNT > 0 THEN
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('USER "' || PI_UNAME || '" UPDATED SUCCESSFULLY.'));
            COMMIT;
        ELSE
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('NO CHANGES WERE MADE TO THE USER.'));
            ROLLBACK;
        END IF;

    EXCEPTION
        WHEN NULL_USERNAME_EXEC THEN
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error updating USERNAME: please give valid USERNAME to update.'));
        WHEN NULL_FNAME_EXEC THEN
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error updating FIRSTNAME: First name cannot be empty.'));
        WHEN NULL_LNAME_EXEC THEN
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error updating LASTNAME: Last name cannot be empty.'));
        WHEN NULL_PASSWORD_EXEC THEN
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error updating PASSWORD: Password cannot be empty.'));
        WHEN OTHERS THEN
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('ERROR: An unexpected error occurred while updating the user: ' || SQLERRM));
        ROLLBACK;
            UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Due to an error Transactions if any are rolled back'));
    END UPDATE_RECRUITER_PROFILE;

END PKG_RECRUITER_MANAGEMENT;
/

CREATE OR REPLACE SYNONYM REC_MGMT
FOR ADMIN_SUPER_USER.PKG_RECRUITER_MANAGEMENT;
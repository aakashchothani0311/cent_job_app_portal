CREATE OR REPLACE PROCEDURE CREATE_JOB_REQ (
   -- PI_COMP_ID IN JOB_REQUISITION.COMPANY_ID%TYPE,
    PI_REC_ID IN JOB_REQUISITION.RECRUITER_ID%TYPE,
    PI_JOB_TITLE IN JOB_REQUISITION.JOB_TITLE%TYPE,
    PI_JOB_DESC IN JOB_REQUISITION.JOB_DESCRIPTION%TYPE,
    PI_DATE_POSTED IN JOB_REQUISITION.DATE_POSTED%TYPE DEFAULT SYSDATE, 
    PI_APP_DEADLINE IN JOB_REQUISITION.APPLICATION_DEADLINE%TYPE,
    PI_EXP_START_DATE IN JOB_REQUISITION.EXPECTED_START_DATE%TYPE,
    PI_RELOCATION_ALLOWANCE IN JOB_REQUISITION.RELOCATION_ALLOWANCE%TYPE DEFAULT 0,
    PI_STATUS IN JOB_REQUISITION.STATUS%TYPE DEFAULT 'open'
) AS
    V_COMP_ID COMPANIES.COMPANY_ID%TYPE;
    
    NULL_REC_ID_EXEC EXCEPTION;
    NULL_TITLE_EXEC EXCEPTION;
    NULL_JOB_DESC_EXEC EXCEPTION;
BEGIN
    IF PI_REC_ID IS NULL THEN
        RAISE NULL_REC_ID_EXEC;
    END IF;
    
    IF PI_JOB_TITLE IS NULL THEN
        RAISE NULL_TITLE_EXEC;
    END IF;
    
     IF PI_JOB_DESC IS NULL THEN
        RAISE NULL_JOB_DESC_EXEC;
    END IF;
    
    SELECT COMPANY_ID
    INTO V_COMP_ID
    FROM RECRUITERS
    WHERE RECRUITER_ID = PI_REC_ID;
    
    IF V_COMP_ID = -1 THEN
        DBMS_OUTPUT.PUT_LINE('TESTING');
    END IF;
    
    INSERT INTO JOB_REQUISITION
        (COMPANY_ID, RECRUITER_ID, JOB_TITLE, JOB_DESCRIPTION, DATE_POSTED, APPLICATION_DEADLINE, EXPECTED_START_DATE, RELOCATION_ALLOWANCE, STATUS)
    VALUES
        (V_COMP_ID, PI_REC_ID, PI_JOB_TITLE, PI_JOB_DESC, PI_DATE_POSTED, PI_APP_DEADLINE, PI_EXP_START_DATE, PI_RELOCATION_ALLOWANCE, PI_STATUS);
        
    DBMS_OUTPUT.PUT_LINE('New JOB REQUISTION Created: ' || PI_JOB_TITLE);
        
EXCEPTION
    WHEN NULL_REC_ID_EXEC THEN
        DBMS_OUTPUT.PUT_LINE('Invalid Recruiter ID: Recruiter ID can not be null.');
    
    WHEN NULL_TITLE_EXEC THEN
        DBMS_OUTPUT.PUT_LINE('Error creating JOB REQUITION: JOB TITLE can not be null/ empty.');
        
    WHEN NULL_JOB_DESC_EXEC THEN
        DBMS_OUTPUT.PUT_LINE('Error creating JOB REQUITION: JOB DESCRIPTION can not be empty.');
        
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Invalid Recruiter ID: Recruiter ID ' || PI_REC_ID ||' does not exsit.');
    
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error creating JOB REQUITION: ' || SQLERRM);
END;
/
    

CREATE OR REPLACE PROCEDURE UPDATE_REQ_STATUS (
    PI_REQ_ID IN JOB_REQUISITION.REQ_ID%TYPE,
    PI_JOB_TITLE IN JOB_REQUISITION.JOB_TITLE%TYPE DEFAULT -1,
    PI_JOB_DESC IN JOB_REQUISITION.JOB_DESCRIPTION%TYPE DEFAULT -1
  --  PI_APP_DEADLINE IN JOB_REQUISITION.APPLICATION_DEADLINE%TYPE,
  --  PI_EXP_START_DATE IN JOB_REQUISITION.EXPECTED_START_DATE%TYPE,
  --  PI_RELOCATION_ALLOWANCE IN JOB_REQUISITION.RELOCATION_ALLOWANCE%TYPE DEFAULT -1,
  --  PI_STATUS IN JOB_REQUISITION.STATUS%TYPE DEFAULT -1
) AS
    V_JOB_REQ JOB_REQUISITION%ROWTYPE;
    
    NULL_JOB_TITLE_EXEC EXCEPTION;
    NULL_JOB_DESC_EXEC EXCEPTION;
    NULL_REL_ALL_EXEC EXCEPTION;
BEGIN
    IF PI_JOB_TITLE IS NULL THEN
        RAISE NULL_JOB_TITLE_EXEC;
    END IF;
    
    IF PI_JOB_DESC IS NULL THEN
        RAISE NULL_JOB_DESC_EXEC;
    END IF;
    
    --IF PI_RELOCATION_ALLOWANCE IS NULL THEN
    --    RAISE NULL_REL_ALL_EXEC;
    --END IF;
    
    SELECT JOB_TITLE, JOB_DESCRIPTION, APPLICATION_DEADLINE, EXPECTED_START_DATE, RELOCATION_ALLOWANCE, STATUS
    INTO V_JOB_REQ.JOB_TITLE, V_JOB_REQ.JOB_DESCRIPTION , V_JOB_REQ.APPLICATION_DEADLINE , V_JOB_REQ.EXPECTED_START_DATE , V_JOB_REQ.RELOCATION_ALLOWANCE , V_JOB_REQ.STATUS
    FROM JOB_REQUISITION
    WHERE REQ_ID = PI_REQ_ID;
    
    --PI_JOB_TITLE =: ;
    
    DBMS_OUTPUT.PUT_LINE('PI_JOB_TITLE: ' || PI_JOB_TITLE);
  --  DBMS_OUTPUT.PUT_LINE('PI_RELOCATION_ALLOWANCE: ' || PI_RELOCATION_ALLOWANCE);
    
EXCEPTION
    WHEN NULL_JOB_TITLE_EXEC THEN
        DBMS_OUTPUT.PUT_LINE('Error updating JOB REQUISITION: JOB TITLE can not be null/ empty.');
    
    WHEN NULL_JOB_DESC_EXEC THEN
        DBMS_OUTPUT.PUT_LINE('Error updating JOB REQUISITION: JOB DESCRIPTION can not be null/ empty.');
        
    WHEN NULL_REL_ALL_EXEC THEN
        DBMS_OUTPUT.PUT_LINE('Error updating JOB REQUISITION: JOB DESCRIPTION can not be null/ empty.');
    
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Invalid Requistion ID: Recruiter ID ' || PI_REQ_ID || ' does not exsit.');
        
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error creating JOB REQUISITION: ' || SQLERRM);
END;
/

BEGIN
    --CREATE_JOB_REQ('2342342', 'TEST TITLE', 'TEST DESC', SYSDATE, SYSDATE + 1, NULL, 0);
  UPDATE_REQ_STATUS(req_ID => 2342);
END;
/


-- DEACTIVATE/ CHANGE STATUS (TRIGGER TO REJECT OTHER CANDIDATES)
-- UPDATE JOB POSTING

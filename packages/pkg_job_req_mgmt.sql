CREATE OR REPLACE PROCEDURE CREATE_JOB_REQ (
    PI_REC_ID IN JOB_REQUISITION.RECRUITER_ID%TYPE,
    PI_JOB_TITLE IN JOB_REQUISITION.JOB_TITLE%TYPE,
    PI_JOB_DESC IN JOB_REQUISITION.JOB_DESCRIPTION%TYPE,
    PI_DATE_POSTED IN JOB_REQUISITION.DATE_POSTED%TYPE DEFAULT SYSDATE, 
    PI_APP_DEADLINE IN JOB_REQUISITION.APPLICATION_DEADLINE%TYPE DEFAULT NULL,
    PI_EXP_START_DATE IN JOB_REQUISITION.EXPECTED_START_DATE%TYPE DEFAULT NULL,
    PI_RELOCATION_ALLOWANCE IN JOB_REQUISITION.RELOCATION_ALLOWANCE%TYPE DEFAULT 0,
    PI_STATUS IN JOB_REQUISITION.STATUS%TYPE DEFAULT 'open'
) AS
    V_COMP_ID COMPANIES.COMPANY_ID%TYPE;
    
    NULL_REC_ID_EXEC EXCEPTION;
    NULL_TITLE_EXEC EXCEPTION;
    NULL_JOB_DESC_EXEC EXCEPTION;
    INVALID_APP_DLINE_EXEC EXCEPTION;
    INVALID_EXP_START_DATE_EXEC EXCEPTION;
    INVALID_STATUS_EXEC EXCEPTION;
BEGIN
    IF PI_REC_ID IS NULL THEN
        RAISE NULL_REC_ID_EXEC;
    END IF;
    
    IF PI_JOB_TITLE IS NULL OR TRIM(PI_JOB_TITLE) IS NULL THEN
        RAISE NULL_TITLE_EXEC;
    END IF;
    
     IF PI_JOB_DESC IS NULL OR TRIM(PI_JOB_DESC) IS NULL THEN
        RAISE NULL_JOB_DESC_EXEC;
    END IF;
    
    IF PI_APP_DEADLINE IS NOT NULL AND PI_APP_DEADLINE < PI_DATE_POSTED THEN
        RAISE INVALID_APP_DLINE_EXEC;
    END IF;
    
    IF PI_EXP_START_DATE IS NOT NULL THEN
        IF PI_EXP_START_DATE < PI_DATE_POSTED OR (PI_APP_DEADLINE IS NOT NULL AND PI_EXP_START_DATE < PI_APP_DEADLINE) THEN
            RAISE INVALID_EXP_START_DATE_EXEC;
        END IF;
    END IF;
    
    IF LOWER(PI_STATUS) NOT IN ('cancelled', 'closed', 'open') THEN
        RAISE INVALID_STATUS_EXEC;
    END IF;
    
    SELECT COMPANY_ID
    INTO V_COMP_ID
    FROM RECRUITERS
    WHERE RECRUITER_ID = PI_REC_ID;
    
    INSERT INTO JOB_REQUISITION
        (COMPANY_ID, RECRUITER_ID, JOB_TITLE, JOB_DESCRIPTION, DATE_POSTED, APPLICATION_DEADLINE, EXPECTED_START_DATE, RELOCATION_ALLOWANCE, STATUS)
    VALUES
        (V_COMP_ID, PI_REC_ID, PI_JOB_TITLE, PI_JOB_DESC, PI_DATE_POSTED, PI_APP_DEADLINE, PI_EXP_START_DATE, PI_RELOCATION_ALLOWANCE, LOWER(PI_STATUS));
        
    UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('New JOB REQUISTION Created: ' || PI_JOB_TITLE));
        
EXCEPTION
    WHEN NULL_REC_ID_EXEC THEN
        UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Invalid Recruiter ID: Recruiter ID can not be null.'));
    
    WHEN NULL_TITLE_EXEC THEN
        UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error creating JOB_REQUISITION: JOB TITLE can not be null/ empty.'));
        
    WHEN NULL_JOB_DESC_EXEC THEN
        UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error creating JOB_REQUISITION: JOB DESCRIPTION can not be null/ empty.'));
    
    WHEN INVALID_APP_DLINE_EXEC THEN
        UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error creating JOB_REQUISITION: APPLICATION_DEADLINE should be greater than DATE_POSTED.'));
        
    WHEN INVALID_EXP_START_DATE_EXEC THEN
        UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error creating JOB_REQUISITION: EXPECTED_START_DATE should be greater than DATE_POSTED and APPLICATION_DEADLINE.'));
        
    WHEN INVALID_STATUS_EXEC THEN
        UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error creating JOB_REQUISITION: STATUS can only be "open", "closed", "cancelled".'));
    
    WHEN NO_DATA_FOUND THEN
        UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Invalid Recruiter ID: Recruiter ID ' || PI_REC_ID || ' does not exsit.'));
    
    WHEN OTHERS THEN
        UTIL_PKG.ADD_NEW_LINE(UTIL_PKG.ADD_TAB('Error creating JOB_REQUISITION: ' || SQLERRM));
END;
/
    

CREATE OR REPLACE PROCEDURE UPDATE_REQ_STATUS (
    PI_REQ_ID IN JOB_REQUISITION.REQ_ID%TYPE,
    PI_JOB_TITLE IN JOB_REQUISITION.JOB_TITLE%TYPE DEFAULT -1,
    PI_JOB_DESC IN JOB_REQUISITION.JOB_DESCRIPTION%TYPE DEFAULT -1
  --  PI_APP_DEADLINE IN JOB_REQUISITION.APPLICATION_DEADLINE%TYPE,
  --  PI_EXP_START_DATE IN JOB_REQUISITION.EXPECTED_START_DATE%TYPE,
  --  PI_RELOCATION_ALLOWANCE IN JOB_REQUISITION.RELOCATION_ALLOWANCE%TYPE DEFAULT -1,
  --  PI_STATUS IN JOB_REQUISITION.STATUS%TYPE DEFAULT -1
) AS
    V_JOB_REQ JOB_REQUISITION%ROWTYPE;
    
    NULL_JOB_TITLE_EXEC EXCEPTION;
    NULL_JOB_DESC_EXEC EXCEPTION;
    NULL_REL_ALL_EXEC EXCEPTION;
BEGIN
    IF PI_JOB_TITLE IS NULL THEN
        RAISE NULL_JOB_TITLE_EXEC;
    END IF;
    
    IF PI_JOB_DESC IS NULL THEN
        RAISE NULL_JOB_DESC_EXEC;
    END IF;
    
    --IF PI_RELOCATION_ALLOWANCE IS NULL THEN
    --    RAISE NULL_REL_ALL_EXEC;
    --END IF;
    
    SELECT JOB_TITLE, JOB_DESCRIPTION, APPLICATION_DEADLINE, EXPECTED_START_DATE, RELOCATION_ALLOWANCE, STATUS
    INTO V_JOB_REQ.JOB_TITLE, V_JOB_REQ.JOB_DESCRIPTION , V_JOB_REQ.APPLICATION_DEADLINE , V_JOB_REQ.EXPECTED_START_DATE , V_JOB_REQ.RELOCATION_ALLOWANCE , V_JOB_REQ.STATUS
    FROM JOB_REQUISITION
    WHERE REQ_ID = PI_REQ_ID;
    
    --PI_JOB_TITLE =: ;
    
    DBMS_OUTPUT.PUT_LINE('PI_JOB_TITLE: ' || PI_JOB_TITLE);
  --  DBMS_OUTPUT.PUT_LINE('PI_RELOCATION_ALLOWANCE: ' || PI_RELOCATION_ALLOWANCE);
    
EXCEPTION
    WHEN NULL_JOB_TITLE_EXEC THEN
        NEW_LINE('Error updating JOB REQUISITION: JOB TITLE can not be null/ empty.');
    
    WHEN NULL_JOB_DESC_EXEC THEN
        NEW_LINE('Error updating JOB REQUISITION: JOB DESCRIPTION can not be null/ empty.');
        
    WHEN NULL_REL_ALL_EXEC THEN
        NEW_LINE('Error updating JOB REQUISITION: JOB DESCRIPTION can not be null/ empty.');
    
    WHEN NO_DATA_FOUND THEN
        NEW_LINE('Invalid Requistion ID: Recruiter ID ' || PI_REQ_ID || ' does not exsit.');
        
    WHEN OTHERS THEN
        NEW_LINE('Error creating JOB REQUISITION: ' || SQLERRM);
END;
/


CREATE OR REPLACE PROCEDURE UPDATE_REQ_STATUS_OPEN (
    PI_REQ_ID IN JOB_REQUISITION.REQ_ID%TYPE
) AS
BEGIN
    --
EXCEPTION
    WHEN OTHERS THEN
        NEW_LINE('Error updating JOB REQUISITION: ' || SQLERRM);
END;
/

-- DEACTIVATE/ CHANGE STATUS (TRIGGER TO REJECT OTHER CANDIDATES)
-- UPDATE JOB POSTING
